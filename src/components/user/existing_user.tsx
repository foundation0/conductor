import { useLocation, useNavigate, Link } from "react-router-dom"
import { useAuth } from "@/components/hooks/useAuth"
import { fieldFocus } from "../libraries/field_focus"
import { useEffect, useState } from "react"
import { BiRightArrowAlt } from "react-icons/bi"
import _ from "lodash"
import { HiPlus } from "react-icons/hi"
import PromptIcon from "@/assets/prompt.svg"
import eventEmitter from "@/components/libraries/events"
import { ph } from "../libraries/logging"

export function AddExistingUser() {
  let navigate = useNavigate()
  let location = useLocation()
  let auth = useAuth()
  const [username, setUsername] = useState<string>("")
  const [password, setPassword] = useState<string>("")
  const [loginInProgress, setLoginInProgress] = useState<boolean>(false)
  let from = location.state?.from?.pathname || "/conductor/"

  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    setLoginInProgress(true)
    event.preventDefault()
    let formData = new FormData(event.currentTarget)
    let username = formData.get("username") as string
    let password = formData.get("password") as string

    auth.signin({ username, password }, () => {
      ph().capture("auth/_success")
      navigate(from, { replace: true })
    })
  }

  // set focus to input
  useEffect(() => {
    setTimeout(() => {
      fieldFocus({ selector: "#username" })
    }, 500)

    window.addEventListener("focus", () => {
      setTimeout(() => {
        fieldFocus({ selector: "#username" })
      }, 200)
    })

    return () => {
      window.removeEventListener("focus", () => {})
    }
  }, [])

  // monitor for error events
  useEffect(() => {
    const handleErrorEvent = async (error: any) => {
      setLoginInProgress(false)
    }

    eventEmitter.on("new_error", handleErrorEvent)

    return () => {
      eventEmitter.off("new_error", handleErrorEvent)
    }
  }, [])

  function getPhoto({ id }: { id: string }) {
    return ""
  }

  async function useSensor() {
    /* 
    TODO: Figure out how to do this without a server

    const challenge = "56535b13-5d93-4194-a282-f234c1c24500"

    const registration = await client.register(active_user.username, challenge, {
      authenticatorType: "auto",
      userVerification: "required",
      timeout: 60000,
      attestation: false,
      debug: false,
    })

    const expected_reg = {
      challenge, // whatever was randomly generated by the server
      origin: "http://localhost:5173",
    }
    const registrationParsed = await server.verifyRegistration(registration, expected_reg)
    console.log('reg', registrationParsed)
    
    const credential = {
      id: "2NoXAuvK6euNMkQhPGWHXCZNABKZVO-Z5fKjwb2j44o",
      publicKey:
        "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAywDcAnChlHhotliM8JshK8ffZtMdGxtg3nsIhuH44GdNWMGX88HPsV67FxZPV7frHRkgT-fRMVZ97dVcFn2qWeTGq1vmCW9ETZ64GXt_JOr86uxyirdfubx-PDQi-bhz6c6w_2q03ZBi-QRn-wWS2glMmmSFRxqevFQGkZYdSQVSZuDbvZXhYJfq97jm0Lh3n5vXWkNpczWTr5g1EZKhuOScHmkRS_SCXuYFLe3y00eN-_tnqH0v8Kh_B7yX4DuK6GER4kZsc0WVgW1QOtCOgozPP88PkjQTyCOZLtKY8EEwPMXjOEbwmSVM_20mjVVoh63I7t9OTuDnJTI5bpyunwIDAQAB",
      algorithm: "RS256",
    } as CredentialKey
    const authentication = await client.authenticate([credential.id], challenge, {
      authenticatorType: "auto",
      userVerification: "required",
      timeout: 60000,
    })

    const expected = {
      challenge, // whatever was randomly generated by the server.
      origin: "http://localhost:5173",
      userVerified: true, // should be set if `userVerification` was set to `required` in the authentication options (default)
      counter: 0, // for enhanced security, you can store the number of times this authenticator was used and ensure it increases each time
    }
    const authenticationParsed = await server.verifyAuthentication(authentication, credential, expected)
    console.log("auth", authenticationParsed) */
  }

  return (
    <div className="flex flex-col h-full bg-zinc-800">
      <div className="flex flex-1 h-full justify-center items-center ">
        <form className="flex flex-col justify-center items-center " onSubmit={handleSubmit}>
          <div className="flex flex-col gap-2">
            <div className="flex w-full justify-center">
              <img src={PromptIcon} className="w-48 h-48 mb-1 opacity-5" />
            </div>
            <div className="flex w-full justify-center text-zinc-500 text-sm font-semibold mb-4">
              Login to your Prompt
            </div>
            <label className="flex flex-row bg-zinc-700/30 border border-zinc-900 border-t-zinc-700 rounded-lg items-center  pl-4 text-xs  font-semibold">
              Username:
              <input
                className="flex flex-1 w-full p-4 py-3 bg-transparent text-xs  border-0 rounded  placeholder-zinc-400 text-zinc-300 outline-none focus:outline-none ring-0 shadow-transparent input  font-normal"
                name="username"
                type="username"
                value={username}
                onChange={(e) =>
                  setUsername(
                    e.target.value
                      .toLowerCase()
                      .trim()
                      .replace(/[^A-Za-z0-9_]/g, "")
                  )
                }
                placeholder="Type your username"
                id="username"
                autoComplete="off"
                spellCheck={false}
              />
            </label>
            <label className="flex flex-row bg-zinc-700/30 border border-zinc-900 border-t-zinc-700 rounded-lg items-center pl-4 text-xs font-semibold">
              Password:
              <input
                className="flex flex-1 p-4 py-3 bg-transparent text-xs border-0 rounded  placeholder-zinc-400 text-zinc-300 outline-none focus:outline-none ring-0 shadow-transparent input  font-normal"
                name="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value.trim())}
                placeholder="Type your password"
                id="password"
                autoComplete="off"
              />
            </label>
            <button
              type="submit"
              disabled={username.length === 0 || password.length === 0}
              className="bg-zinc-700/50 hover:bg-zinc-700/80 border border-zinc-900 border-t-zinc-700 lex inset-y-0 right-0 font-medium rounded-lg text-sm text-zinc-400 hover:text-zinc-200 p-4 py-3 justify-center items-center text-left"
            >
              Login{" "}
              {loginInProgress ? (
                <div className="float-right w-5 h-5 flex justify-center items-center" role="status">
                  <svg
                    aria-hidden="true"
                    className="inline w-4 h-4 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
                    viewBox="0 0 100 101"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                      fill="currentColor"
                    />
                    <path
                      d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                      fill="currentFill"
                    />
                  </svg>
                  <span className="sr-only">Loading...</span>
                </div>
              ) : (
                <BiRightArrowAlt className="float-right w-5 h-5" />
              )}
            </button>
            {/* {typeof PublicKeyCredential !== "undefined" ? (
                <div className="flex flex-row justify-center items-center">
                  <div
                    onClick={() => useSensor()}
                    className="bg-zinc-700/30 border border-zinc-900  border-t-zinc-700/70 rounded-md p-3 ml-2 h-full btn-square cursor-pointer text-zinc-400 hover:text-zinc-200"
                  >
                    <IoFingerPrintOutline className="  h-full w-full" />
                  </div>
                </div>
              ) : null} */}
          </div>
          {/* {typeof PublicKeyCredential !== "undefined" ? (
              <div className="my-2">
                <div className="text-xs text-zinc-400/90">
                  <kbd className="kbd kbd-xs">Alt</kbd> + <kbd className="kbd kbd-xs">X</kbd> fingerprint
                </div>
              </div>
            ) : null} */}
          <div className="my-10 flex flex-col w-full gap-2">
            <div className=" flex flex-col w-full gap-2">
              <Link to="/onboarding">
                <div
                  onClick={() => {}}
                  className="flex flex-row bg-zinc-800/30 hover:bg-zinc-900/70 border border-dashed border-zinc-700  border-t-zinc-600/70 rounded-md flex-1 p-3 cursor-pointer text-zinc-500 hover:text-zinc-200"
                >
                  <div className="flex w-8 h-8 rounded-full bg-zinc-700/30  justify-center items-center overflow-hidden text-zinc-500 font-semibold">
                    <HiPlus className="w-3 h-3 " />
                  </div>
                  <div className="flex items-center text-xs ml-2">Create new user</div>
                  <div className="flex flex-grow justify-end items-center">
                    <BiRightArrowAlt className="w-5 h-5" />
                  </div>
                </div>
              </Link>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}
