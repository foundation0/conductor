import{a as u,__tla as m}from"./index-77360db5.js";let h,c,v=Promise.all([(()=>{try{return m}catch{}})()]).then(async()=>{function p(e,t){const i=new Set;for(const a of t)e.has(a)&&i.add(a);return i}function d(e,t){const i=new Set(e);for(const a of t)i.add(a);return i}function l(e,t){const i=new Set(e);for(const a of t)i.delete(a);return i}function o(e){return Array.from(e).map(t=>`"${t}"`).join(", ")}h=class extends u{get inputKeys(){return this.inputVariables}get outputKeys(){return this.outputVariables}constructor(e){if(super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"returnAll",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.inputVariables=e.inputVariables,this.outputVariables=e.outputVariables??[],this.outputVariables.length>0&&e.returnAll)throw new Error("Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.");this.returnAll=e.returnAll??!1,this._validateChains()}_validateChains(){var s;if(this.chains.length===0)throw new Error("Sequential chain must have at least one chain.");const e=((s=this.memory)==null?void 0:s.memoryKeys)??[],t=new Set(this.inputKeys),i=new Set(e),a=p(t,i);if(a.size>0)throw new Error(`The following keys: ${o(a)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);const r=d(t,i);for(const n of this.chains){const f=l(new Set(n.inputKeys),r);if(f.size>0)throw new Error(`Missing variables for chain "${n._chainType()}": ${o(f)}. Only got the following variables: ${o(r)}.`);const b=new Set(n.outputKeys),y=p(r,b);if(y.size>0)throw new Error(`The following output variables for chain "${n._chainType()}" are overlapping: ${o(y)}. This can lead to unexpected behaviour.`);for(const w of b)r.add(w)}if(this.outputVariables.length===0)if(this.returnAll){const n=l(r,t);this.outputVariables=Array.from(n)}else this.outputVariables=this.chains[this.chains.length-1].outputKeys;else{const n=l(new Set(this.outputVariables),new Set(r));if(n.size>0)throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${o(n)}.`)}}async _call(e,t){let i=e;const a={};for(const s of this.chains){i=await s.call(i,t==null?void 0:t.getChild());for(const n of Object.keys(i))a[n]=i[n]}const r={};for(const s of this.outputVariables)r[s]=a[s];return r}_chainType(){return"sequential_chain"}static async deserialize(e){const t=[],i=e.input_variables,a=e.output_variables,r=e.chains;for(const s of r){const n=await u.deserialize(s);t.push(n)}return new h({chains:t,inputVariables:i,outputVariables:a})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),input_variables:this.inputVariables,output_variables:this.outputVariables,chains:e}}},c=class extends u{get inputKeys(){return[this.inputKey]}get outputKeys(){return[this.outputKey]}constructor(e){super(e.memory,e.verbose,e.callbacks??e.callbackManager),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputKey",{enumerable:!0,configurable:!0,writable:!0,value:"input"}),Object.defineProperty(this,"outputKey",{enumerable:!0,configurable:!0,writable:!0,value:"output"}),Object.defineProperty(this,"trimOutputs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.trimOutputs=e.trimOutputs??!1,this._validateChains()}_validateChains(){for(const e of this.chains){if(e.inputKeys.length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${e.inputKeys.length} for ${e._chainType()}.`);if(e.outputKeys.length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${e.outputKeys.length} for ${e._chainType()}.`)}}async _call(e,t){let i=e[this.inputKey];for(const a of this.chains)i=await a.run(i,t==null?void 0:t.getChild()),this.trimOutputs&&(i=i.trim()),await(t==null?void 0:t.handleText(i));return{[this.outputKey]:i}}_chainType(){return"simple_sequential_chain"}static async deserialize(e){const t=[],i=e.chains;for(const a of i){const r=await u.deserialize(a);t.push(r)}return new c({chains:t})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),chains:e}}}});export{h as SequentialChain,c as SimpleSequentialChain,v as __tla};
